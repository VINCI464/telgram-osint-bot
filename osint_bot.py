import logging
import requests
from bs4 import BeautifulSoup
import phonenumbers
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from urllib.parse import quote_plus
import aiohttp
import datetime
import json
from pathlib import Path

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LOG_FILE = "bot_logs.txt"
BLACKLIST_FILE = "blacklist.json"
ADMIN_PASSWORD = "5&93?7!9_GujIAD"
TOKEN = "7735515311:AAGfbnBaOla-fClzuXLa9BVK9MuMG5eCFBQ"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

HIBP_API_URL = "https://haveibeenpwned.com/api/v3/breachedaccount/"
HIBP_API_KEY = ""  # –ù–µ—Ç –∫–ª—é—á–∞

HEADERS = {"User-Agent": "OSINT-Bot"}
if HIBP_API_KEY:
    HEADERS["hibp-api-key"] = HIBP_API_KEY

def load_blacklist():
    if Path(BLACKLIST_FILE).exists():
        with open(BLACKLIST_FILE, "r") as f:
            return set(json.load(f))
    return set()

def save_blacklist(data):
    with open(BLACKLIST_FILE, "w") as f:
        json.dump(list(data), f)

blacklist = load_blacklist()

def log_event(user, command, args):
    time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a") as f:
        f.write(f"[{time}] {user} ‚Üí {command} {args}\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üìã –ú–µ–Ω—é –±–æ—Ç–∞:\n\n"
        "/check_email <email> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ email —á–µ—Ä–µ–∑ HIBP\n"
        "/check_phone <–Ω–æ–º–µ—Ä> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è\n"
        "/check_twin <email|–Ω–æ–º–µ—Ä> ‚Äî –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–≤–∏–Ω–∫–æ–≤\n"
        "/admin_panel <–ø–∞—Ä–æ–ª—å> ‚Äî –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    )
    await update.message.reply_text(msg)

async def check_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /check_email test@example.com")
        return
    email = context.args[0].lower()
    if email in blacklist:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç email –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    log_event(update.effective_user.username, "/check_email", email)
    msg = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ email: {email}\n\n"
    url = HIBP_API_URL + email
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=HEADERS) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    leaks = [breach["Name"] for breach in data]
                    msg += f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö:\n" + "\n".join(leaks)
                elif resp.status == 404:
                    msg += "‚úÖ –£—Ç–µ—á–µ–∫ –ø–æ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                elif resp.status == 429:
                    msg += "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                else:
                    msg += f"‚ùå –û—à–∏–±–∫–∞ HIBP: {resp.status}"
        except Exception as e:
            msg += f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    msg += f"\n\nüîó Google: https://www.google.com/search?q={quote_plus(email)}"
    await update.message.reply_text(msg)

async def check_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /check_phone +79991234567")
        return
    number = context.args[0]
    if number in blacklist:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    log_event(update.effective_user.username, "/check_phone", number)
    try:
        parsed = phonenumbers.parse(number, None)
        valid = phonenumbers.is_valid_number(parsed)
        region = phonenumbers.region_code_for_number(parsed)
        carrier_name = phonenumbers.carrier.name_for_number(parsed, "ru")

        msg = (
            f"üìû –ù–æ–º–µ—Ä: {number}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {region}\n"
            f"üì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'–î–∞' if valid else '–ù–µ—Ç'}\n\n"
        )

        sites = [
            {
                "name": "FreePhoneTracer","url": f"https://www.freephonetracer.com/phone/{quote_plus(number)}"
            },
            {
                "name": "PhoneNumberInfo",
                "url": f"https://phonenumberinfo.net/phone/{quote_plus(number)}"
            }
        ]

        for site in sites:
            try:
                r = requests.get(site["url"], headers={"User-Agent": "Mozilla/5.0"}, timeout=6)
                if r.status_code == 200:
                    soup = BeautifulSoup(r.text, "html.parser")
                    owner = soup.find(id="owner-name")
                    msg += f"üë§ {site['name']}: {owner.text.strip() if owner else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                elif r.status_code in [403, 401]:
                    msg += f"‚ö†Ô∏è {site['name']} ‚Üí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/Captcha\nüîó {site['url']}\n"
                else:
                    msg += f"‚ùå {site['name']} ‚Üí –û—à–∏–±–∫–∞ {r.status_code}\nüîó {site['url']}\n"
            except Exception as e:
                msg += f"‚ùå –û—à–∏–±–∫–∞ {site['name']}: {e}\nüîó {site['url']}\n"

        msg += (
            f"\nüîó Google: https://www.google.com/search?q={quote_plus(number)}\n"
            f"üîó Telegram: https://t.me/s/{quote_plus(number)}"
        )
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def check_twin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /check_twin email/–Ω–æ–º–µ—Ä")
        return
    idn = context.args[0]
    if idn in blacklist:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    log_event(update.effective_user.username, "/check_twin", idn)
    links = [
        f"https://vk.com/search?c%5Bq%5D={quote_plus(idn)}&c%5Bsection%5D=people",
        f"https://t.me/s/{quote_plus(idn)}",
        f"https://www.google.com/search?q={quote_plus(idn)}",
        f"https://instagram.com/{quote_plus(idn)}",
        f"https://facebook.com/search/top?q={quote_plus(idn)}",
        f"https://twitter.com/search?q={quote_plus(idn)}",
        f"https://github.com/search?q={quote_plus(idn)}"
    ]
    msg = f"üß≠ –ü–æ–∏—Å–∫ —Ç–≤–∏–Ω–∫–æ–≤ –ø–æ: {idn}\n\n"
    for link in links:
        msg += f"üîó {link}\n"
    await update.message.reply_text(msg)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global blacklist
    if not context.args or context.args[0] != ADMIN_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    # –ë–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if len(context.args) >= 3 and context.args[1] == "ban":
        target = context.args[2]
        blacklist.add(target)
        save_blacklist(blacklist)
        await update.message.reply_text(f"üö´ {target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç.")
        return

    try:
        with open(LOG_FILE, "r") as f:
            logs = f.read()
        await update.message.reply_text(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n{logs[-4000:]}")
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("check_email", check_email))
    app.add_handler(CommandHandler("check_phone", check_phone))
    app.add_handler(CommandHandler("check_twin", check_twin))
    app.add_handler(CommandHandler("admin_panel", admin_panel))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
